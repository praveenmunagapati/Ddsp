module ddsp.util.sequencer;

import ddsp.util.functions;

static immutable float sixtyfourth = 0.015625f;
static immutable float thirtysecond = 0.03125f;
static immutable float sixteenth = 0.0625f;
static immutable float eight = 0.125;
static immutable float quarter = 0.25f;
static immutable float half = 0.5f;
static immutable float whole = 1;

class Sequencer
{

public:

    float getCurrentTimeInMS()
    {
        return samplesToMs(_timeInSamples, _sampleRate);
    }
    
    bool atNote(float noteLength)
    {
        float noteTimeSamples = getNoteTimeInSamples(noteLength, _tempo);
        if(_timeInSamples % noteTimeSamples == 0)
            return true;
        else
            return false;
    }
    
    bool atWholeNote(){ return atNote(whole); }
    
    bool atHalfNote(){ return atNote(half); }
    
    bool atQuarterNote(){ return atNote(quarter); }
    
    bool atEigthNote(){ return atNote(eigth); }
    
    bool atSixteenthNote(){ return atNote(sixteenth); }
    
    bool atThirtySecondNote(){ return atNote(thirtysecond); }
    
    bool atSixtyFourthNote(){ return atNote(sixtyfourth); }
    
    void setSampleRate(float sampleRate) { _sampleRate = sampleRate; }
    
    void updateInfo(float tempo, long timeInSamples, bool hostIsPlaying)
    {
        _tempo = tempo;
        _timeInSamples = timeInSamples;
        _hostIsPlaying = hostIsPlaying;
    }
    
private:
    
    float _sampleRate = 0;
    float _tempo = 0;
    long _timeInSamples = 0;

    bool _hostIsPlaying = false;
}

float getNoteTimeInMilliseconds(float length, float tempo)
{
    return (1 / tempo) * length * 60000;
}

float getNoteTimeInSamples(float length, float tempo, float sampleRate)
{
    return msToSamples(getNoteTimeInMilliseconds(length, tempo), sampleRate); 
}